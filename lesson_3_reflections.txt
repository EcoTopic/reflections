#What happens when you initialize a repository? Why do you need to do it?
A .git dir is made with where metadata about the files in the parent dir can be stored.

$ git init

# to see the status of the .git dir
$ git status

# to add file to staging area:

$ git add file.txt
$ git add file2.txt

# to remove a file from staging area
$ git reset file.txt

# How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area contains the files that you want to track, they form the repository. The value this offers is that the working directory can contain other files that do not have to be part of the repository.

# difference besteen working dir and staging area
git diff

# diff between staging area and repository (most recent commit)
git diff --staged

# re-attach a severed head
git checkout master

#How can you use the staging area to make sure you have one commit per logical change?
YOu can add changes to the staging area as you are working on the file. Once you come to the stage that you feel you have completed a logical change, you can commit the files in the staging area to a commit and add a message with it.

#Branching
#create new branch
git branck new-branch
#make new branch the place to save commits to
git checkout new-branch
#check current branch
git branch

#What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you want to add experimental features that you're not sure off if it will work out. In this case the master still is the working version that you can easily refer back to.

#How do the diagrams help you visualize the branch structure?
A diagram is more clear than a long list of commit id's


#What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Result is one remaining branch with the most current commit on top. The diagram shows how we arrived at the current version.


#What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Git highlight the confict area's and merges additions/deletions that do not pose a conflict.
